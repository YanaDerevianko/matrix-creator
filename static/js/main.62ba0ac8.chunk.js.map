{"version":3,"sources":["redux/matrix/matrix-actions.js","redux/matrix/matrix-reducer.js","redux/store.js","components/Input/Input.jsx","components/OptionsButton/OptionsButton.styled.jsx","components/OptionsButton/OptionsButton.jsx","components/TableGeneratorForm/TableGeneratorForm.jsx","components/AverageValueOfColumn/AverageValueOfColumn.styled.jsx","components/AverageValueOfColumn/AverageValueOfColumn.jsx","components/MatrixCell/MatrixCell.jsx","components/TotalSumInRow/TotalSumInRow.styled.jsx","components/TotalSumInRow/TotalSumInRow.jsx","components/Matrix/Matrix.styled.jsx","components/Matrix/Matrix.jsx","components/App/App.styled.jsx","components/App/App.jsx","index.js"],"names":["createMatrix","createAction","addRow","deleteRow","setRows","setColumns","matrixReducer","createReducer","numberOfRows","numberOfColumns","matrix","matrixActions","state","action","payload","combineReducers","store","configureStore","reducer","Input","inputLabel","inputHandler","value","htmlFor","shortid","generate","id","type","onChange","e","param","target","dispatch","Button","styled","button","OptionsButton","handleClick","name","onClick","inputsArray","text","inputField","label","split","join","mapDispatchToProps","onIncrement","onDecrement","connect","map","length","AverageColumn","div","AverageValueOfColumn","amount","props","matrixItem","percentage","useState","isPercentage","setPercentage","percentageToSrt","percent","Number","toFixed","percentageStyle","backgroundImage","color","style","item","onClickMatrixCell","onMouseEnter","onMouseLeave","SumInRow","TotalSumInRow","MatrixTable","randomNumber","Math","floor","random","useEffect","filledMatrix","Array","fill","gridLayout","gridTemplateColumns","gridTemplateRows","sumOfCellsInRow","rowIndex","reduce","acc","mtrx","i","averageValuePerColumn","columnIndex","index","Container","Title","h1","SubTitle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62ba0ac8.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst createMatrix = createAction(\"matrix/create\");\r\nconst addRow = createAction(\"matrix/addRow\");\r\nconst deleteRow = createAction(\"matrix/deleteRow\");\r\nconst setRows = createAction(\"matrix/setRows\");\r\nconst setColumns = createAction(\"matrix/setColumns\");\r\n\r\nexport default {\r\n  createMatrix,\r\n  addRow,\r\n  deleteRow,\r\n  setRows,\r\n  setColumns,\r\n};\r\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\r\nimport matrixActions from \"./matrix-actions\";\r\n\r\nconst addRow = (state, action) => {\r\n  return { ...state, numberOfRows: state.numberOfRows + 1 };\r\n};\r\nconst deleteRow = (state, action) => {\r\n  return { ...state, numberOfRows: state.numberOfRows - 1 };\r\n};\r\nconst setRows = (state, action) => {\r\n  return { ...state, numberOfRows: action.payload };\r\n};\r\nconst setColumns = (state, action) => {\r\n  return { ...state, numberOfColumns: action.payload };\r\n};\r\nconst createMatrix = (state, action) => {\r\n  return { ...state, matrix: action.payload };\r\n};\r\n\r\nconst initialState = {\r\n  numberOfRows: 0,\r\n  numberOfColumns: 0,\r\n  matrix: [],\r\n};\r\n\r\nconst matrixReducer = createReducer(initialState, {\r\n  [matrixActions.addRow]: addRow,\r\n  [matrixActions.deleteRow]: deleteRow,\r\n  [matrixActions.setRows]: setRows,\r\n  [matrixActions.setColumns]: setColumns,\r\n  [matrixActions.createMatrix]: createMatrix,\r\n});\r\nexport default combineReducers({\r\n    matrixReducer,\r\n  });","import { configureStore } from '@reduxjs/toolkit';\r\nimport reducer from './matrix/matrix-reducer'\r\n\r\n\r\nconst store = configureStore({reducer});\r\n\r\nexport default store;","import React from \"react\";\r\nimport store from \"../../redux/store\";\r\nimport  shortid from 'shortid';\r\n\r\n\r\nexport const Input = ({ inputLabel, inputHandler, value }) => {\r\n  const setValueHandler = (param) => store.dispatch(inputHandler(param));\r\n\r\n  return (\r\n    <label htmlFor={shortid.generate()}>\r\n      {inputLabel}\r\n      <input\r\n        id={shortid.generate()}\r\n        type=\"number\"\r\n        onChange={(e) => setValueHandler(+e.target.value)}\r\n        value={value}\r\n      />\r\n    </label>\r\n  );\r\n};","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: transparent;\r\n  border: 2px solid #e74c3c;\r\n  border-radius: 0.6em;\r\n  color: #e74c3c;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1;\r\n  margin: 20px;\r\n  padding: 1.2em 2.8em;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-weight: 700;\r\n  transition: box-shadow 300ms ease-in-out, color 300ms ease-in-out;\r\n  &:hover {\r\n    box-shadow: 0 0 40px 40px #e74c3c inset;\r\n    color: #fff;\r\n    outline: 0;\r\n  }\r\n\r\n`;","import React from \"react\";\r\nimport {Button} from './OptionsButton.styled';\r\n\r\nexport const OptionsButton = ({ handleClick, name }) => {\r\n  return (\r\n    <Button onClick={handleClick}>\r\n      {name}\r\n    </Button>\r\n  );\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport matrixActions from \"../../redux/matrix/matrix-actions\";\r\nimport { Input } from \"../Input/Input\";\r\nimport { OptionsButton } from \"../OptionsButton/OptionsButton\";\r\n\r\n\r\nconst inputsArray = [\r\n  {\r\n    action: matrixActions.setRows,\r\n    text: \"Rows: \",\r\n  },\r\n  {\r\n    action: matrixActions.setColumns,\r\n    text: \"Columns: \",\r\n  },\r\n];\r\n\r\nconst inputField = (label) => (\r\n  \r\n  <Input\r\n    key={label.text.split(\" \").join(\"\")}\r\n    inputLabel={label.text}\r\n    inputHandler={label.action}\r\n    value={label.value}\r\n  />\r\n);\r\n\r\nconst TableGeneratorForm = ({\r\n  numberOfColumns,\r\n  numberOfRows,\r\n  matrix,\r\n  onIncrement,\r\n  onDecrement,\r\n}) => {\r\n  inputsArray[0].value = numberOfRows;\r\n  inputsArray[1].value = numberOfColumns;\r\n  return (\r\n    <>\r\n      <form>{inputsArray.map(inputField)}</form>\r\n      {matrix.length > 0 ? (\r\n        <>\r\n          <OptionsButton handleClick={onIncrement} name=\"Add new row\" />\r\n          <OptionsButton handleClick={onDecrement} name=\"Delete row\" />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  numberOfColumns: state.matrixReducer.numberOfColumns,\r\n  numberOfRows: state.matrixReducer.numberOfRows,\r\n  matrix: state.matrixReducer.matrix,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onIncrement: matrixActions.addRow,\r\n  onDecrement: matrixActions.deleteRow,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableGeneratorForm);\r\n","import styled from \"@emotion/styled\";\r\n\r\n\r\nexport const AverageColumn = styled.div`\r\nbackground-color: rgb(107, 107, 107);\r\ncolor: #fff;\r\nmargin: 2px;\r\nfont-weight: bold;\r\n\r\n`;","import React from \"react\";\r\nimport {AverageColumn} from './AverageValueOfColumn.styled'\r\n\r\n\r\nconst AverageValueOfColumn = ({ amount }) => (\r\n  <AverageColumn>{amount}</AverageColumn>\r\n);\r\n\r\nexport default AverageValueOfColumn;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport store from '../../redux/store';\r\nimport matrixActions from \"../../redux/matrix/matrix-actions\";\r\n\r\nconst MatrixCell = ({ matrix, amount, id, percentage }) => {\r\n\r\n    const [isPercentage, setPercentage] = useState(false);\r\n  \r\n    const percentageToSrt = (percent) => `${Number(percent * 100).toFixed(1)}%`;\r\n  \r\n    const percentageStyle = {\r\n      backgroundImage: `linear-gradient(to right, gray 0% ${percentageToSrt(\r\n        percentage\r\n      )}, white ${percentageToSrt(percentage)} 100%)`,\r\n      color: \"black\",\r\n    };\r\n  \r\n    const onClickMatrixCell = (id) => {\r\n      const incrementItemAmount = (item) =>\r\n        item.id === id ? { ...item, amount: item.amount + 1 } : item;\r\n      store.dispatch(matrixActions.createMatrix(matrix.map(incrementItemAmount)));\r\n    };\r\n  \r\n    const onMouseEnterHandler = () => setPercentage(true);\r\n  \r\n    const onMouseLeaveHandler = () => setPercentage(false);\r\n  \r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        style={isPercentage ? percentageStyle : {}}\r\n        onClick={() => onClickMatrixCell(id)}\r\n        onMouseEnter={onMouseEnterHandler}\r\n        onMouseLeave={onMouseLeaveHandler}\r\n      >\r\n        {isPercentage ? (\r\n          <span>{percentageToSrt(percentage)}</span>\r\n        ) : (\r\n          <span>{amount}</span>\r\n        )}\r\n      </button>\r\n    );\r\n  };\r\n  const mapStateToProps = (state, props) => ({\r\n    amount: props.matrixItem.amount,\r\n    id: props.matrixItem.id,\r\n    matrix: state.matrixReducer.matrix,\r\n    percentage: props.percentage,\r\n  });\r\n  \r\n  export default connect(mapStateToProps)(MatrixCell);","import styled from \"@emotion/styled\";\r\n\r\n\r\nexport const SumInRow = styled.div`\r\nbackground-color: rgb(107, 107, 107);\r\ncolor: #fff;\r\nmargin: 2px;\r\nfont-weight: bold;\r\n\r\n`;","import React from \"react\";\r\nimport {SumInRow} from './TotalSumInRow.styled'\r\n\r\nconst TotalSumInRow = ({ amount }) => <SumInRow>{amount}</SumInRow>;\r\n\r\nexport default TotalSumInRow;","import styled from \"@emotion/styled\";\r\n\r\nexport const MatrixTable = styled.div`\r\ndisplay: grid;\r\ngap: 1;\r\n`;\r\nexport const SumInRow = styled.div`\r\nbackground-color: rgb(107, 107, 107);\r\ncolor: #fff;\r\nmargin: 2px;\r\nfont-weight: bold;\r\n\r\n`;","import React from \"react\";\r\nimport { useEffect, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport matrixActions from \"../../redux/matrix/matrix-actions\";\r\nimport AverageValueOfColumn from \"../AverageValueOfColumn/AverageValueOfColumn\";\r\nimport MatrixCell from \"../MatrixCell/MatrixCell\";\r\nimport TotalSumInRow from \"../TotalSumInRow/TotalSumInRow\";\r\nimport store from \"../../redux/store\";\r\nimport {MatrixTable} from './Matrix.styled';\r\n\r\n\r\nconst randomNumber = () => ({\r\n  amount: Math.floor(Math.random() * 1000),\r\n  id: shortid.generate(),\r\n});\r\n\r\nconst Matrix = ({ numberOfRows, numberOfColumns, matrix }) => {\r\n  useEffect(() => {\r\n    const filledMatrix = Array(numberOfRows * numberOfColumns)\r\n      .fill(0)\r\n      .map(randomNumber);\r\n    store.dispatch(matrixActions.createMatrix(filledMatrix));\r\n  }, [numberOfRows, numberOfColumns]);\r\n\r\n  const gridLayout = {\r\n    gridTemplateColumns: `repeat(${numberOfColumns + 1}, 1fr)`,\r\n    gridTemplateRows: `repeat(${numberOfRows + 1}, 1fr)`,\r\n  };\r\n\r\n  const sumOfCellsInRow = Array(numberOfRows)\r\n    .fill(0)\r\n    .map((item, rowIndex) =>\r\n      matrix.reduce((acc, mtrx, i) => {\r\n        if (\r\n          i >= rowIndex * numberOfColumns &&\r\n          i < (rowIndex + 1) * numberOfColumns\r\n        ) {\r\n          return acc + mtrx.amount;\r\n        }\r\n        return acc;\r\n      }, 0)\r\n    );\r\n\r\n  let averageValuePerColumn = [];\r\n  if (sumOfCellsInRow.length) {\r\n    averageValuePerColumn = Array(numberOfColumns)\r\n      .fill(0)\r\n      .map((item, columnIndex) => {\r\n        let acc = 0;\r\n        for (\r\n          let i = columnIndex;\r\n          i <= numberOfColumns * numberOfRows - 1;\r\n          i += numberOfColumns\r\n        ) {\r\n          acc += typeof matrix[i] === \"undefined\" ? 0 : matrix[i].amount;\r\n        }\r\n        return Math.floor(acc / numberOfRows);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <MatrixTable style={gridLayout}>\r\n      {matrix.map((item, index) =>\r\n        index % numberOfColumns === numberOfColumns - 1 ? (\r\n          <Fragment key={shortid.generate()}>\r\n            <MatrixCell\r\n              key={item.id}\r\n              matrixItem={item}\r\n              percentage={\r\n                item.amount /\r\n                sumOfCellsInRow[Math.floor(index / numberOfColumns)]\r\n              }\r\n            />\r\n             <TotalSumInRow\r\n              key={shortid.generate()}\r\n              amount={sumOfCellsInRow[Math.floor(index / numberOfColumns)]}\r\n            />\r\n          </Fragment>\r\n        ) : (\r\n          <MatrixCell\r\n            key={item.id}\r\n            matrixItem={item}\r\n            percentage={\r\n              item.amount / sumOfCellsInRow[Math.floor(index / numberOfColumns)]\r\n            }\r\n          />\r\n        )\r\n      )}\r\n      {averageValuePerColumn.map((item) => (\r\n        <AverageValueOfColumn key={shortid.generate()} amount={item} />\r\n      ))}\r\n    </MatrixTable>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  matrix: state.matrixReducer.matrix,\r\n  numberOfColumns: state.matrixReducer.numberOfColumns,\r\n  numberOfRows: state.matrixReducer.numberOfRows\r\n});\r\n\r\nexport default connect(mapStateToProps)(Matrix);\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\nmargin: 0 auto;\r\npadding: 25px;\r\ntext-align: center;\r\n\r\n`;\r\nexport const Title = styled.h1`\r\ncolor: #e74c3c;\r\n\r\n`;\r\nexport const SubTitle = styled.h1`\r\ncolor: gray;\r\n\r\n`;","import TableGeneratorForm from \"../TableGeneratorForm/TableGeneratorForm\";\nimport Matrix from \"../Matrix/Matrix\";\nimport {Container, Title, SubTitle} from './App.styled';\n\nfunction App() {\n  return (\n    <Container>\n      <Title>Here you can create a magic matrix &#128525;</Title>\n      <SubTitle>The magic table must have at least one row and column</SubTitle>\n      <TableGeneratorForm />\n      <Matrix />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}